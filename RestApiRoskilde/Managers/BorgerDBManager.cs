using Microsoft.EntityFrameworkCore;
using RestApiRoskilde.Models;
using System.Data.Common;

namespace RestApiRoskilde.Managers
{
    public class BorgerDBManager
    {
        //DB metoder
        //ref til DBcontext
        private readonly DBConnection _DBConnectionFile;

        public BorgerDBManager()
        {
        }

        //constructor
        //DP injection
        public BorgerDBManager(DBConnection dbConnect)
        {
            _DBConnectionFile = dbConnect;
        }

        public IEnumerable<BorgerOplysninger> GetAllB()
        {
            //kopi af listen
            List<BorgerOplysninger> result = _DBConnectionFile.Borgere.ToList();
            return result;
        }
       
        //get borger på deres NoteID
        public BorgerOplysninger GetByIDBorger(int id)
        {
            BorgerOplysninger borger = _DBConnectionFile.Borgere.FirstOrDefault(b => b.ID == id);
            return borger;
        }
        //Opret en ny borger
        public BorgerOplysninger OpretBorgerDB(BorgerOplysninger borger)
        {
            //The ID is being reset to ensure a new ID is
            //generated by the database (likely an auto-incremented primary key).
            borger.ID = 0;
            _DBConnectionFile.Borgere.Add(borger);
            _DBConnectionFile.SaveChanges();
            return borger;

        }
        public BorgerOplysninger SletBorgerDB(int id) 
        {
            BorgerOplysninger? sletEnBorger = GetByIDBorger(id);
            if (sletEnBorger == null)
            {
                return null;
            }
            _DBConnectionFile.Borgere.Remove(sletEnBorger);
            _DBConnectionFile.SaveChanges();
            return sletEnBorger;
        }
        //get borger på deres NoteID
        //GET ALL NOTER på en bestemt Borger med ID
        public IEnumerable<BorgerNote> GetAllNoterByIDDB(int borgerID)
        {
            IEnumerable<BorgerNote> noterListe = 
                _DBConnectionFile.Noter.Where(b=>b.ID == borgerID).ToList();
            return noterListe;
        }
        public IEnumerable<BorgerOpgave> GetAllOpgaverByIDDB(int borgerID)
        {
            IEnumerable<BorgerOpgave> borgerOpgaverListe = 
                _DBConnectionFile.Opgaver.Where(b => b.ID == borgerID).ToList();
            return borgerOpgaverListe;
        }
        public IEnumerable<BorgerPause> GetAllPauseByIDDB(int borgerID)
        {
            IEnumerable<BorgerPause> borgerPauseListe =
                _DBConnectionFile.Pauser.Where(b => b.ID == borgerID).ToList();
            return borgerPauseListe;
        }

    }
}
