using Microsoft.EntityFrameworkCore;
using RestApiRoskilde.Models;
using System.Data.Common;

namespace RestApiRoskilde.Managers
{
    public class BorgerDBManager
    {
        //DB metoder
        //ref til DBcontext
        private readonly DBConnection _DBConnectionFile;

        public BorgerDBManager()
        {
        }

        //constructor
        //DP injection
        public BorgerDBManager(DBConnection dbConnect)
        {
            _DBConnectionFile = dbConnect;
        }

        public IEnumerable<BorgerOplysninger> GetAllB()
        {
            //kopi af listen
            List<BorgerOplysninger> result = _DBConnectionFile.Borgere.ToList();
            return result;
        }
       
        //get borger på deres NoteID
        public BorgerOplysninger GetByIDBorger(int id)
        {
            BorgerOplysninger borger = _DBConnectionFile.Borgere.FirstOrDefault(b => b.ID == id);
            return borger;
        }
        //Opret en ny borger
        public BorgerOplysninger OpretBorgerDB(BorgerOplysninger borger)
        {
            //The ID is being reset to ensure a new ID is
            //generated by the database (likely an auto-incremented primary key).
            borger.ID = 0;
            _DBConnectionFile.Borgere.Add(borger);
            _DBConnectionFile.SaveChanges();
            return borger;

        }
        public BorgerOplysninger SletBorgerDB(int id) 
        {
            BorgerOplysninger? sletEnBorger = GetByIDBorger(id);
            if (sletEnBorger == null)
            {
                return null;
            }
            _DBConnectionFile.Borgere.Remove(sletEnBorger);
            _DBConnectionFile.SaveChanges();
            return sletEnBorger;
        }
        //get borger på deres NoteID
        //GET ALL NOTER på en bestemt Borger med ID
        public IEnumerable<BorgerNote> GetAllNoterByIDDB(int borgerID)
        {
            IEnumerable<BorgerNote> noterListe = 
                _DBConnectionFile.Noter.Where(b=>b.ID == borgerID).ToList();
            return noterListe;
        }
        public IEnumerable<BorgerOpgave> GetAllOpgaverByIDDB(int borgerID)
        {
            IEnumerable<BorgerOpgave> borgerOpgaverListe = 
                _DBConnectionFile.Opgaver.Where(b => b.ID == borgerID).ToList();
            return borgerOpgaverListe;
        }
        public IEnumerable<BorgerPause> GetAllPauseByIDDB(int borgerID)
        {
            IEnumerable<BorgerPause> borgerPauseListe =
                _DBConnectionFile.Pauser.Where(b => b.ID == borgerID).ToList();
            return borgerPauseListe;
        }
        /// <summary>
        /// Pauser
        /// </summary>
        /// <param name="opretPause"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public BorgerPause OpretPauseDB(BorgerPause opretPause, int id)
        {
            // Fetch the borger with the given ID
            BorgerOplysninger borger = GetByIDBorger(id);

            // Check if borger exists
            if (borger == null)
            {
                return null; // Return null if the borger does not exist
            }

            // Create a new pause
            opretPause.PauseID = 0; // Ensure a new ID is generated by the database
            opretPause.ID = borger.ID; // Set the foreign key to associate with the borger
            _DBConnectionFile.Pauser.Add(opretPause); // Add the pause to the database
            _DBConnectionFile.SaveChanges(); // Save changes to the database

            return opretPause; // And Return the created pause
        }

        public IEnumerable<BorgerRegistrering> GetAllRegiByIDDB(int borgerID)
        {
            IEnumerable<BorgerRegistrering> borgerRegiListe =
                _DBConnectionFile.Registreringer.Where(b => b.ID == borgerID).ToList();
            return borgerRegiListe;
        }
        public BorgerRegistrering OpretRegiDB(BorgerRegistrering opretReg, int id)
        {
            BorgerOplysninger borger = GetByIDBorger(id);
            if (borger == null)
            {
                return null;
            }
            // Create a new registration
            opretReg.RegiID = 0; // Ensure a new ID is generated by the database
            opretReg.ID = borger.ID; // Set the foreign key to associate with the borger
            _DBConnectionFile.Registreringer.Add(opretReg); // Add the regi to the database
            _DBConnectionFile.SaveChanges(); // Save changes to the database

            return opretReg; // And Return the created registration

        }
        //Opret et navn på borger - det er en update
        public BorgerOplysninger OpdaterBorgerNavn(string navn, int borgerID)
        {
            BorgerOplysninger borger = GetByIDBorger(borgerID);
            if (borger == null)
            {
                return null;
            }
            //opdater borgerens navn
            borger.Navn = navn;
            _DBConnectionFile.SaveChanges();
            return borger;
        }

        // Find the Borger object in the list based on the telephone number
        public BorgerOplysninger? GetBorgerByTlf(string tlf)
        {
            return _DBConnectionFile.Borgere.FirstOrDefault(b => b.Tlf == tlf);
        }
        
        //chechke om borgeren eksistere på tlf nummer, ellers opret en ny borger med det tlf der indtastes
        //kan ikke være null
        public BorgerOplysninger CheckIfBorgerExists(string tlf)
        {
            // Check if a BorgerOplysninger eksistere for det givne tlf nr
            BorgerOplysninger? borger = GetBorgerByTlf(tlf);
            // Hvis Borger ikke eksistere, opret da en ny med det indtastede tlf nr
            if (borger == null)
            {
                borger = OpretBorgerDB(new BorgerOplysninger { Tlf = tlf });
            }
            return borger;
        }


        
    }
}
